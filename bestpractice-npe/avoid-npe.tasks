Best practices to avoid NPE:
    What,Who & Why?:
        ☐ You are not a real Java programmer until you've dealt with a null pointer exception
        ☐ What is Null Reference? is it really complex?
        ☐ Who Invented Null Reference? Really?
        ☐ Why we need null references?

    Techniques to prevent Null Pointer Exceptions [VM RULE SATA] :
        ☐ V - ValueOf
        ☐ M - Map
        ☐ R - Return Value
        ☐ U - Utilities
        ☐ L - Literal
        ☐ E - Empty Collections
        ☐ T - Ternary
        ☐ A - Arguments
        ☐ T - Tests - Devote some time to write a couple tests cases that verify that no NullPointerException
        ☐ A - Assertions
        
    Tools to prevent NPE:
        ☐ Static Analysis tools such as FindBugs, IntelliJ, Checkstyle and PMD
        ☐ JSR-305 annotations.
            ☐ @Nullable - an annotation that alerts us if we put null somewhere it doesn’t belong.
            ☐ @Nonnull - We just need to put it everywhere that we don’t already have @Nullable
            ☐ Use Eclipse IDE for null analysis
            ☐ Use Sonarlint for null analysis

    To prevent unintended exceptions add null check:
        ☐ Looks ugly
        ☐ Lot of boilerplate code.
        ☐ These Checks get in the way of business logic.

    Alternatives to Null:#TODO - add single statement example:
        ☐ "?." [Elvis Operator in Groovy]
        ☐ "MayBe" [Haskell]
        ☐ Option[T] [Scala]

    Java-8 Optional By Definition:
        ☐ Ecapculates Optional value.
        ☐ Includes methods to explicitly deal with the cases where a value is present or not.
        ☐ Optional class force you think about the case of when value is not present
        ☐ Optional class is not replacment every single null reference.
    
    Creation of Optional:
        ☐ Optional.empty()
        ☐ Optional.ofNullable()
        ☐ Optional.of()
     
    Retrieving optional value : [GET]:
        ☐ Optional.get() - but caution , you need to check the value is present or not
        ☐ Optional.ifPresent() - perform some operation if present.
        ☐ Optional.orElse() - to set default value if value is not present
        ☐ Optional.orElseGet() - no default value exists and you need to compute the value if not present.
        ☐ Optional.orElseThrow() - if no value is present and need to throw NoSuchElement Exception.
        ☐ Optional.orElseThrow(Exception)- Throw Explicit exception.
        
    Dont's in usage of Optional:
        ☐ Never assign null to an optional variable
        ☐ Avoid chaining Optional's methods with the single purpose of getting a value
        ☐ No Field's are declared as optional
        ☐ No Constructor arguments as Optional
        ☐ Dont use Optional as a setters Arguments.
        ☐ Dont use Optional as a Method Arguments.
        ☐ Dont use Optional to Return Empty collections or Arrays.
        ☐ Avoid using optional in Collections.
        ☐ Avoid Optional<T> and Choose Non Generic OptionalInt,OptionalLong or OptionalDouble.
        ☐ No Need to Unwrap for Equality Check
        ☐ Never do as synchronized.

    Additional usage of Optional:
        ☐ Transform Values Via Map() and flatMap()
        ☐ Use filter to reject wrapped values
        #TODO: add some other the best approaches

    Next in Show:
        ☐ Optional.ifPresentOrElse - Java 9
        ☐ Optional.or - Java9
        ☐ Optional.stream - Java 9
        ☐ Optional.isEmpty() - Java 11
